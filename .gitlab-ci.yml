image: "registry.gitlab.com/live-lab/software/dtcontrol/test:python-3.10"

stages:
  - images
  - test
  #- version
  #- deploy

test:python3.8:
  stage: test
  script:
    - /usr/bin/python3.8 --version
    - pwd
    - /usr/bin/python3.8 -m unittest discover -s test
  artifacts:
    name: "$CI_JOB_NAME-Python3.8"
    when: on_failure
    expire_in: '20 min'
    paths:
      - decision_trees/

test:python3.9:
  stage: test
  script:
    - /usr/bin/python3.9 --version
    - pwd
    - /usr/bin/python3.9 -m unittest discover -s test
  artifacts:
    name: "$CI_JOB_NAME-Python3.9"
    when: on_failure
    expire_in: '20 min'
    paths:
      - decision_trees/

.version:
  stage: version
  script:
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - ssh-keyscan gitlab.lrz.de >> ~/.ssh/known_hosts && chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - echo "$CI_GITLAB_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - python3.8 gen-semver.py
  artifacts:
    paths:
      - VERSION
  only:
    - master

.deploy_staging:
  stage: deploy
  environment: "staging"
  script:
    - python3.8 setup.py bdist_wheel
    - ls -l dist/*
    - twine upload dist/*
  when: manual
  only:
    - tags

.deploy_release:
  stage: deploy
  environment: "release"
  script:
    - python3.8 setup.py bdist_wheel
    - ls -l dist/*
    - twine upload dist/*
  when: manual
  only:
    - tags
    
.deploy_website:
  stage: deploy
  image: ruby:2.7
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - web/vendor/ruby
  before_script:
    - apt update && apt install -y rsync
    - cd web
    - bundle config set path 'vendor/ruby'
    - bundle install
  script:
    - bundle exec jekyll build
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - cat ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - rsync -avz _site/* dtcontrol@vmesparza11:/var/www/dtcontrol
  only:
    - master
  
  # Build Docker images
# following this guideline: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
.build-docker:
  stage: images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /root/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --dockerfile $CI_PROJECT_DIR/$DOCKERFILE --destination $CI_REGISTRY_IMAGE/$IMAGE
  rules:
    - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
      changes:
        - $DOCKERFILE
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $BUILD_DOCKER == "true"'

build-docker:test:python-3.10:
  extends: .build-docker
  variables:
    DOCKERFILE: Dockerfile.python-3.10
    IMAGE: test:python-3.10
