import sympy as sp

# ----- Top-Down In Depth Approach -----
term1 = sp.sympify("x_2 + ((-2-2)/(2)) + (x_5 - x_3) + ((x_5 + 1 * (-2)) - (x_3 + 1 * 2)) * (((-10 - x_5)/(-2))-1) + (((0-(-2))*(((-10-((x_3 + 2) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2)))^2)/(2)) + (-10-((x_3 + 1 * 2) + ((((-10 - x_5)/(-2))-1)) * (-2))) * ((-10-((x_3 + 2) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2))")
term2 = sp.sympify("x_2 + ((-2-0)/(2)) + (x_5 - x_3) + ((x_5 + 1 * (-2)) - (x_3 + 1 * 0)) * (((-10 - x_5)/(-2))-1) + (((0-(-2))*(((-10-((x_3 + 0) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2)))^2)/(2)) + (-10-((x_3 + 1 * 0) + ((((-10 - x_5)/(-2))-1)) * (-2))) * ((-10-((x_3 + 0) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2))")

# ----- Bottom-Up Optimized Approach -----
term3 = sp.sympify("x_2 - 2 + ((((0-(-2))*((-10-((x_3+(-2))-2*(((-10 - x_5)/(-2))-1)))/(-2))^2))/(2)) + (-10 - x_3) * ((-10-((x_3+2)-2*((((-10 - x_5)/(-2))-1))))/(-2))")
term4 = sp.sympify("x_2 + ((((0-(-2))*((-10-((x_3+(-2))-2*(((-10 - x_5)/(-2))-1)))/(-2))^2))/(2)) + (-10 - x_3) * ((-10-((x_3+0)-2*((((-10 - x_5)/(-2))-1))))/(-2))")


print(term1.equals(term3))
print(term2.equals(term4))