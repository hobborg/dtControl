----- TMP DRAFT -----
c_0*x_0+c_1*x_1+c_2*x_2+c_3*x_3 <= c_4
c_0*x_0+c_1*x_1+c_2*x_2+c_3*x_3 <= c_4; c_0 in {0.96223}; c_1 in {-0.564809}; c_2 in {1.32869}; c_3 in {3.315577}; c_4 in {-1.088248}
c_0*x_0+c_1*x_1+c_2*x_2+c_3*x_3 <= c_4; c_0 in {0.96223}; c_1 in {-0.564809}; c_3 in {3.315577}; x_3 in [-1.088248,2)
sqrt(x_0)*c_0 + log(x_1) -(c_0 / x_2) * c_1 + c_2 >= c_3; c_3 in {0,1,2,3,4}
sqrt(x_0) + c_2 != c_3; c_3 in {0,1,2,3,4}; x_0 in (12, 13); c_2 in {14,15,16}

----- TWO ROOMS -----
Tworooms shortcut terms
T_1_on = (0.5 * (x_5 - x_4) + 0.05 * (x_3 - x_4) + 0.083 * (500 - x_4))
T_1_off = (0.5 * (x_5 - x_4) + 0.05 * (x_3 - x_4))
T_2_on = (0.5 * (x_4 - x_5) + 0.033 * (x_3 - x_5) + 0.083 * (500 - x_5))
T_2_off = (0.5 * (x_4 - x_5) + 0.033 * (x_3 - x_5))

Tworooms final predicates
----- choose = 1 -----
x_0 <= 0.5
----- 160 <= T_1 + T_1_on <= 240 -----
x_4 + (0.5 * (x_5 - x_4) + 0.05 * (x_3 - x_4) + 0.083 * (500 - x_4)) <= 240
x_4 + (0.5 * (x_5 - x_4) + 0.05 * (x_3 - x_4) + 0.083 * (500 - x_4)) >= 160

----- 160 <= T_1 + T_1_off <= 240 -----
x_4 + (0.5 * (x_5 - x_4) + 0.05 * (x_3 - x_4)) <= 240
x_4 + (0.5 * (x_5 - x_4) + 0.05 * (x_3 - x_4)) >= 160

----- 160 <= T_2 + T_2_on <= 240 -----
x_5 + (0.5 * (x_4 - x_5) + 0.033 * (x_3 - x_5) + 0.083 * (500 - x_5)) <= 240
x_5 + (0.5 * (x_4 - x_5) + 0.033 * (x_3 - x_5) + 0.083 * (500 - x_5)) >= 160

----- 160 <= T_2 + T_2_off <= 240 -----
x_5 + (0.5 * (x_4 - x_5) + 0.033 * (x_3 - x_5)) <= 240
x_5 + (0.5 * (x_4 - x_5) + 0.033 * (x_3 - x_5)) >= 160

----- Top-Down In Depth Approach (size: -10/ 20) (file: cruise_latest.dump)-----
Cruise shortcut terms
t_f = (((-10 - x_5)/(-2))-1)
t_e_acc = ((-10-((x_3 + 2) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2))
t_e_neu = ((-10-((x_3 + 0) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2))

Cruise final predicates
x_2 + ((-2-2)/(2)) + (x_5 - x_3) + ((x_5 + 1 * (-2)) - (x_3 + 1 * 2)) * (((-10 - x_5)/(-2))-1) + (((0-(-2))*(((-10-((x_3 + 2) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2)))^2)/(2)) + (-10-((x_3 + 1 * 2) + ((((-10 - x_5)/(-2))-1)) * (-2))) * ((-10-((x_3 + 2) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2)) <= 5
x_2 + ((-2-0)/(2)) + (x_5 - x_3) + ((x_5 + 1 * (-2)) - (x_3 + 1 * 0)) * (((-10 - x_5)/(-2))-1) + (((0-(-2))*(((-10-((x_3 + 0) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2)))^2)/(2)) + (-10-((x_3 + 1 * 0) + ((((-10 - x_5)/(-2))-1)) * (-2))) * ((-10-((x_3 + 0) - 2 * ((((-10 - x_5)/(-2))-1))))/(-2)) <= 5
x_3 <= -10
x_3 <= 19

----- Bottom-Up Optimized Approach (size: -10/ 20) (file: cruise_latest.dump)-----
Cruise shortcut terms
t_f = (((-10 - x_5)/(-2))-1)

Cruise final predicates
x_2 - 2 + ((((0-(-2))*((-10-((x_3+(-2))-2*(((-10 - x_5)/(-2))-1)))/(-2))^2))/(2)) + (-10 - x_3) * ((-10-((x_3+2)-2*((((-10 - x_5)/(-2))-1))))/(-2)) <= 5
x_2 + ((((0-(-2))*((-10-((x_3+(-2))-2*(((-10 - x_5)/(-2))-1)))/(-2))^2))/(2)) + (-10 - x_3) * ((-10-((x_3+0)-2*((((-10 - x_5)/(-2))-1))))/(-2)) <= 5
x_3 <= -10
x_3 <= 19


------ Cruise Safa Original Version (size: -6 / 16) (file: cruise_safa.dump) ------
x_2 + ((-2-2)/(2)) + (x_5 - x_3) + ((x_5 + 1 * (-2)) - (x_3 + 1 * 2)) * (((-6 - x_5)/(-2))-1) + (((0-(-2))*(((-6-((x_3 + 2) - 2 * ((((-6 - x_5)/(-2))-1))))/(-2)))^2)/(2)) + (-6-((x_3 + 1 * 2) + ((((-6 - x_5)/(-2))-1)) * (-2))) * ((-6-((x_3 + 2) - 2 * ((((-6 - x_5)/(-2))-1))))/(-2)) <= 5
x_2 + ((-2-0)/(2)) + (x_5 - x_3) + ((x_5 + 1 * (-2)) - (x_3 + 1 * 0)) * (((-6 - x_5)/(-2))-1) + (((0-(-2))*(((-6-((x_3 + 0) - 2 * ((((-6 - x_5)/(-2))-1))))/(-2)))^2)/(2)) + (-6-((x_3 + 1 * 0) + ((((-6 - x_5)/(-2))-1)) * (-2))) * ((-6-((x_3 + 0) - 2 * ((((-6 - x_5)/(-2))-1))))/(-2)) <= 5
x_3 <= -6
x_3 <= 14


------ Testing Cruise  (size: -6 / 20) (file: cruise_minV.dump)-----
x_2 + ((-2-2)/(2)) + (x_5 - x_3) + ((x_5 + 1 * (-2)) - (x_3 + 1 * 2)) * (((-6 - x_5)/(-2))-1) + (((0-(-2))*(((-6-((x_3 + 2) - 2 * ((((-6 - x_5)/(-2))-1))))/(-2)))^2)/(2)) + (-6-((x_3 + 1 * 2) + ((((-6 - x_5)/(-2))-1)) * (-2))) * ((-6-((x_3 + 2) - 2 * ((((-6 - x_5)/(-2))-1))))/(-2)) <= 5
x_2 + ((-2-0)/(2)) + (x_5 - x_3) + ((x_5 + 1 * (-2)) - (x_3 + 1 * 0)) * (((-6 - x_5)/(-2))-1) + (((0-(-2))*(((-6-((x_3 + 0) - 2 * ((((-6 - x_5)/(-2))-1))))/(-2)))^2)/(2)) + (-6-((x_3 + 1 * 0) + ((((-6 - x_5)/(-2))-1)) * (-2))) * ((-6-((x_3 + 0) - 2 * ((((-6 - x_5)/(-2))-1))))/(-2)) <= 5
x_3 <= -6
x_3 <= 19

